import boto3
import json
import logging
import os

from base64 import b64decode
from urllib.request import Request, urlopen
from urllib.error import URLError, HTTPError

# DO NOT EDIT THIS FILE
# It was created by CloudFormation
# To make changes, update the CloudFormation Template

# The base-64 encoded, encrypted key (CiphertextBlob) stored in the kmsEncryptedHookUrl environment variable
HOOK_URL = "<slack webhook>"
# The Slack channel to send a message to stored in the slackChannel environment variable
SLACK_CHANNEL = "<slack channel name>"

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def lambda_handler(event, context):
    logger.info("Event: " + str(event))
    brand = "DR"
    message = json.loads(event["Records"][0]["Sns"]["Message"])
    alarmName = message["AlarmName"]
    description = message["AlarmDescription"]
    #newStateReason = message["NewStateReason"]
    region = message["Region"]
    instanceId = getInstanceId(message["Trigger"]["Dimensions"])

    if instanceId != None :
        ec2 = boto3.resource('ec2')
        instance = ec2.Instance(instanceId)
        instanceName = getInstanceName(instance.tags)
    else :
        instanceName = ""
        instanceId = ""

    slack_message = {
        'channel': SLACK_CHANNEL,
        'text': ":red_circle: %s - %s \n :red_circle: Alarm: %s \n :red_circle: %s \n :red_circle: %s \n :red_circle: %s \n" % (brand, instanceName, alarmName, description,instanceId, region)
    }

    req = Request(HOOK_URL, json.dumps(slack_message).encode('utf-8'))
    try:
        response = urlopen(req)
        response.read()
        logger.info("Message posted to %s", slack_message['channel'])
    except HTTPError as e:
        logger.error("Request failed: %d %s", e.code, e.reason)
    except URLError as e:
        logger.error("Server connection failed: %s", e.reason)

def getInstanceId(dimensions) :
    id = None
    logger.info(dimensions)
    for dimension in dimensions :
        if dimension["name"] == "InstanceId" :
            id = dimension["value"]
    return id

def getInstanceName(tags) :
    name = None
    logger.info(tags)
    for tag in tags :
        if tag["Key"] == "Name" :
            name = tag["Value"]
    logger.info(name)
    return name
